\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename live-wc.info
@settitle Live Word Count
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Live word count.      Count text words in real time.
@end direntry

@finalout
@titlepage
@title Live Word Count
@author Pradyumna Swanand Paranjape
@end titlepage

@contents

@ifnottex
@node Top
@top Live Word Count
@end ifnottex

@menu
* Goals::
* Install::
* Mode line indicator segment::
* Buffer-locals::
* Customize::
* Interactive commands::
* License::

@detailmenu
--- The Detailed Node Listing ---

Install

* Install vc-use-package::
* Install and configure live-wc::

Buffer-locals

* @code{live-wc-target}::
* @code{live-wc-narrow-to-org-subtree}::
* @code{live-wc-org-headline-levels}::
* @code{live-wc-fraction}::
* @code{live-wc-update-unmodified}::

Customize

* Customization group::
* @code{global-live-wc-modes}::
* @code{live-wc-unbind-modes}::
* @code{live-wc-idle-sec}::
* @code{live-wc-ignore-if}::
* @code{live-wc-max-buffer-size}::
* @code{live-wc-line-pos}::
* @code{live-wc-abs-format}::
* @code{live-wc-frac-format}::
* @code{live-wc-bright}::
* @code{live-wc-overflow-color}::
* @code{live-wc-abs-count-face}::

Interactive commands

* @code{live-wc-set-target}::
* @code{live-wc-toggle-format}::
* @code{live-wc-toggle-subtree}::
* @code{live-wc-toggle-unmodified}::
* @code{live-wc-refresh}::
* @samp{live-wc-keymap}::

@end detailmenu
@end menu

@node Goals
@chapter Goals

@itemize
@item
Minor mode @code{live-wc-mode} displays live word count in mode-line.
@item
Count text words in real-time (on the go).
@item
@ref{@code{live-wc-ignore-if}, , Ignore} lines that satisfy @emph{arbitrary predicates}. (non-text, source-code, comments, @dots{})
@item
Restrict word count to region when selected.
@item
Org mode header word-counts.
@item
Set word-count target / cap (i.e. goal / limit) for the buffer.
@item
Display formats:
@itemize
@item
Absolute number of words
@item
Fraction of
@itemize
@item
Count to target
@item
Region to total
@end itemize
@item
Dynamic color
@end itemize
@item
Enable globally with @code{global-live-wc-mode}.
@item
@ref{Customize, , Customization} group: @code{live-wc}.
@item
Mode map @code{live-wc-mode-map}.
@end itemize

@node Install
@chapter Install

This package is not in any of the  @samp{*} ELPAs.
I don't know how to put it there.
Also, I don't know @emph{why} I should put it there given the availability of @uref{https://github.com/slotThe/vc-use-package, vc-use-package}.

The package may be installed directly from repository using Emacs' @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html, package-vc-install} using @samp{vc-use-package} (or a suitable equivalent.), and configured using using Emacs' @samp{use-package} (or a suitable equivalent).
I might add this to @samp{MELPA} in future.

@menu
* Install vc-use-package::
* Install and configure live-wc::
@end menu

@node Install vc-use-package
@section Install vc-use-package

Following installation code is necessary @strong{only for} Emacs version < 30.
@lisp
(when (version< emacs-version "30")
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)))
@end lisp

@node Install and configure live-wc
@section Install and configure live-wc

@lisp
(use-package live-wc
  :ensure t
  :demand t
  :vc (live-wc :url "https://gitlab.com/pradyparanjpe/live-wc.git")
  :init
  (global-live-wc-mode)
  :custom
  (live-wc-max-buffer-size 32786)  ; 32kb
  (live-wc-fraction t)
  (live-wc-line-pos 5))
@end lisp

@node Mode line indicator segment
@chapter Mode line indicator segment

@itemize
@item
Mode-line indicator segment color: fractions are colored according to value.
Cyan: nearer to target (100%); Red: further from target (0%).
@item
Left - Click (mouse-1) to set word-count target/cap @ref{@code{live-wc-target}, , live-wc-target} for the buffer.
@item
Right - Click (mouse-3) to toggle @ref{@code{live-wc-fraction}, , live-wc-fraction} for the buffer.
@item
Hover to see details about:
@itemize
@item
Number of lines (non-blank)
@item
Number of bytes (roughly equivalent to characters including spaces)
@item
Absolute words-count of the buffer.
@item
Target word-count (if set)
@end itemize
@end itemize

@node Buffer-locals
@chapter Buffer-locals

@itemize
@item
Following variables may be set locally for buffers in a @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html, Local variables} section:
@end itemize

@example
# Local Variables:
# live-wc-fraction: t
# live-wc-target: -4000
# End:
@end example

@menu
* @code{live-wc-target}::
* @code{live-wc-narrow-to-org-subtree}::
* @code{live-wc-org-headline-levels}::
* @code{live-wc-fraction}::
* @code{live-wc-update-unmodified}::
@end menu

@node @code{live-wc-target}
@section @code{live-wc-target}

Default: @samp{nil}

Set word-count target.
Value @samp{0} is considered same as @samp{nil} (unset).
Negative value indicates @emph{cap}.
When cap is set, the fraction is Red near 100%, Cyan near 0%.

@node @code{live-wc-narrow-to-org-subtree}
@section @code{live-wc-narrow-to-org-subtree}

Default: @samp{t}

Narrow count to current org subtree whenever possible.
When inside an org-heading, restrict the word-count to that heading.

@node @code{live-wc-org-headline-levels}
@section @code{live-wc-org-headline-levels}

Default: @samp{nil}

Org headings up to this level are considered true @emph{headings} for word-count restriction.
Beyond this level, org-headings are regarded as list-items.
If value is @samp{nil}, it is derived from @code{org-export-headline-levels}.

@node @code{live-wc-fraction}
@section @code{live-wc-fraction}

Default: @samp{t}

When possible, display word count as fraction percent, otherwise, display absolute (raw) number.

It is possible to display wc as fraction when:
@itemize
@item
Region is selected (region / word-count)
@item
@ref{@code{live-wc-target}, , Target} is set. (word-count / Target)
@end itemize

``Word count'' for this calculation respects the setting for @ref{@code{live-wc-narrow-to-org-subtree}, , live-wc-narrow-to-org-subtree}.

@node @code{live-wc-update-unmodified}
@section @code{live-wc-update-unmodified}

Default: @samp{t}

Ordinarily, @emph{live-wc} counters would continue collecting statistics @ref{@code{live-wc-idle-sec}, , periodically} when Emacs is idle.
However, if this starts causing unwanted CPU load (because the file size/complexity), @code{live-wc-update-unmodified} may be set to @samp{nil}.
@emph{Live-wc} counters will then collect statistics only once in the beginning when a new buffer is opened and run @samp{nop} (no operation) to conserve CPU and periodically when the buffer gets @ref{buffer-modified-p,modified,,elisp,}.

@quotation Warning
Setting to @samp{nil} could be undesirable when @emph{live-wc} is used to navigate the buffer without modifying it, to count words in various org subtrees.

@end quotation

@node Customize
@chapter Customize

@menu
* Customization group::
* @code{global-live-wc-modes}::
* @code{live-wc-unbind-modes}::
* @code{live-wc-idle-sec}::
* @code{live-wc-ignore-if}::
* @code{live-wc-max-buffer-size}::
* @code{live-wc-line-pos}::
* @code{live-wc-abs-format}::
* @code{live-wc-frac-format}::
* @code{live-wc-bright}::
* @code{live-wc-overflow-color}::
* @code{live-wc-abs-count-face}::
@end menu

@node Customization group
@section Customization group

@code{live-wc}

@node @code{global-live-wc-modes}
@section @code{global-live-wc-modes}

Default: @code{'(text-mode)}

List of modes, including all derived modes, for which, @code{live-wc-mode} is turned ON automatically when @code{global-live-wc-mode} is enabled.

@node @code{live-wc-unbind-modes}
@section @code{live-wc-unbind-modes}

Default: @code{'(prog-mode dired-mode special-mode)}

List of modes, including all derived modes, for which, word-count is not attempted even when @code{live-wc-mode} is enabled.

@node @code{live-wc-idle-sec}
@section @code{live-wc-idle-sec}

Default: 1 (seconds)

@emph{Live-WC} counters gather buffer-statistics (number of words, characters and lines) for the current buffer in the background, when Emacs is idle.
This variable sets the frequency.
If the gathered values are not consumed to generate @emph{live-wc}'s mode-line segment, the counter assumes that nothing has happened since the last count, and runs @samp{nop} (no operation).

@node @code{live-wc-ignore-if}
@section @code{live-wc-ignore-if}

Default:
@lisp
'((:ignore (lambda () (= (line-beginning-position) (line-end-position)))
           :desc "blank lines")
  (:ignore (lambda () (nth 4 (syntax-ppss))) :desc "comment (by property)")
  (:ignore (lambda () (looking-at (format " *%s" comment-start-skip)))
           :desc "comment (by marker)")
  (:ignore org-at-comment-p :desc "org comment")
  (:ignore org-at-keyword-p :desc "org keyword")
  (:ignore org-at-table-p :desc "org table")
  (:ignore org-at-TBLFM-p :desc "org table formula")
  (:ignore org-at-table.el-p :desc "table.el")
  (:ignore org-at-heading-p :desc "org heading")
  (:ignore org-at-property-p :desc "org property")
  (:ignore org-at-drawer-p :desc "org drawer")
  (:ignore org-at-property-drawer-p :desc "property drawer's first line")
  (:ignore live-wc-org-block-range :desc "any org block"))
@end lisp

If a line in the buffer matches any of the predicates referenced in this list, that line is skipped (ignored) from counts.
@itemize
@item
@code{:ignore} property refers the predicate.
@item
@code{:desc} is not used, this is meant to remind the user why a predicate was added.
@end itemize

@node @code{live-wc-max-buffer-size}
@section @code{live-wc-max-buffer-size}

Default: 15360 (bytes)

Maximum size of buffer beyond which, word count is inactive.
This is conservatively set to 15kB@.

@node @code{live-wc-line-pos}
@section @code{live-wc-line-pos}

Default: @code{most-positive-fixnum}

Insert @emph{live-wc} count at this position on mode line.
Indexing starts with @samp{0}.
This value is auto clipped between @samp{0} and existing number of segments in the mode line.

@quotation Tip
The first two segments in the mode line are often @code{%e} and @code{mode-line-front-space}.
So, @emph{live-wc} added at position @samp{2} will appear at the beginning of an ordinary mode line.

@end quotation

@node @code{live-wc-abs-format}
@section @code{live-wc-abs-format}

Default: @samp{¶:%d}

Format string for live absolute word count.

@node @code{live-wc-frac-format}
@section @code{live-wc-frac-format}

Default: @samp{¶:%2.2f%%%%}

Format string for live word count when expressed as a fraction (percentage).

@quotation Warning
Remember to sufficiently skip @samp{%} symbols.

@end quotation

@node @code{live-wc-bright}
@section @code{live-wc-bright}

Default: @samp{1.0}

Brightness of @emph{live-wc} fraction. Interval: @samp{[0.0, 1.0]}

@node @code{live-wc-overflow-color}
@section @code{live-wc-overflow-color}

Default: #ff00ff

Color of segment when count overflows @ref{@code{live-wc-target}, , live-wc-target}.

@node @code{live-wc-abs-count-face}
@section @code{live-wc-abs-count-face}

Default: @code{mode-line-active}

Face of @emph{live-wc} when displaying absolute count.

@node Interactive commands
@chapter Interactive commands

@menu
* @code{live-wc-set-target}::
* @code{live-wc-toggle-format}::
* @code{live-wc-toggle-subtree}::
* @code{live-wc-toggle-unmodified}::
* @code{live-wc-refresh}::
* @samp{live-wc-keymap}::
@end menu

@node @code{live-wc-set-target}
@section @code{live-wc-set-target}

Set word count @ref{@code{live-wc-target}, , target} for the buffer.

@node @code{live-wc-toggle-format}
@section @code{live-wc-toggle-format}

Toggle fraction/absolute word count @ref{@code{live-wc-frac-format}, , format} for the buffer.

@node @code{live-wc-toggle-subtree}
@section @code{live-wc-toggle-subtree}

Toggle @ref{@code{live-wc-narrow-to-org-subtree}, , subtree counts} for the buffer.

@node @code{live-wc-toggle-unmodified}
@section @code{live-wc-toggle-unmodified}

Toggle state of @ref{@code{live-wc-update-unmodified}, , live-wc-update-unmodified}.

@node @code{live-wc-refresh}
@section @code{live-wc-refresh}

Attempt to refresh word counts.

@node @samp{live-wc-keymap}
@section @samp{live-wc-keymap}

An unbound keymap within which, key-presses are bound to all above interactive commands.

@node License
@chapter License

@uref{LICENSE, GNU LGPLv3}

@bye
