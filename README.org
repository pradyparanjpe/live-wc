#+title: Live Word Count
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+MACRO: c @@html:<font color="$1">$2</font>@@
#+AUTHOR: Pradyumna Swanand Paranjape
#+EMAIL: pradyparanjpe@rediffmail.com
#+property: header-args :tangle no :mkdirp t :results no :eval never
#+OPTIONS: _:{}
#+EXPORT_FILE_NAME: live-wc.html
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Live word count
#+TEXINFO_DIR_DESC: Count text words in real time

* Goals
- Minor mode ~live-wc-mode~ displays live word count in mode-line.
- Count text words in real-time (on the go).
- [[*~live-wc-ignore-if~][Ignore]] lines that satisfy /arbitrary predicates/. (non-text, source-code, comments, ...)
- Restrict word count to region when selected.
- Org mode header word-counts.
- Set word-count target / cap (i.e. goal / limit) for the buffer.
- Display formats:
  + Absolute number of words
  + Fraction of
    * Count to target
    * Region to total
  + Dynamic color
- Enable globally with ~global-live-wc-mode~.
- [[*Customize][Customization]] group: ~live-wc~.
- Mode map ~live-wc-mode-map~.

* Install
This package is not in any of the  =*= ELPAs.
I don't know how to put it there.
Also, I don't know /why/ I should put it there given the availability of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html][package-vc-install]].
I might add this to =MELPA= in future.

** Install packge
Install live-wc using vc-package-install.
#+begin_src emacs-lisp
  (package-vc-install
   '(live-wc :url "https://gitlab.com/pradyparanjpe/live-wc.git"))
  (customize-set-variable 'live-wc-max-buffer-size 32768)  ; 32 kB
  (customize-set-variable 'live-wc-fraction t)
  (customize-set-variable 'live-wc-line-pos 5)
#+end_src

*** Optionally, enable globally
#+begin_src emacs-lisp
  (require 'live-wc)
  (global-live-wc-mode)
#+end_src

** Install and configure live-wc
*** Install vc-use-package
Following installation code is necessary *only for* Emacs version < 30.
#+begin_src emacs-lisp
  (when (version< emacs-version "30")
    (unless (package-installed-p 'vc-use-package)
      (package-vc-install "https://github.com/slotThe/vc-use-package"))
    (require 'vc-use-package))
#+end_src

*** My configuration
As I use package: ([[https://github.com/slotThe/vc-use-package][vc-use-package]])
#+begin_src emacs-lisp
  (use-package live-wc
    :demand t  ; optional
    :vc (live-wc :url "https://gitlab.com/pradyparanjpe/live-wc.git")
    :init (global-live-wc-mode)  ; optional
    :custom
    (live-wc-max-buffer-size 32768)  ; 32kB
    (live-wc-fraction t)
    (live-wc-line-pos 5))
#+end_src

** Melpa recipe                                                     :noexport:
Potential recipe
#+begin_src emacs-lisp
  (live-wc :fetcher gitlab :repo "pradyparanjpe/live-wc")
#+end_src

* Mode line indicator segment
- Mode-line indicator segment color: fractions are colored according to value.
  Cyan: nearer to target (100%); Red: further from target (0%).
- Left - Click (mouse-1) to set word-count target/cap [[*~live-wc-target~][live-wc-target]] for the buffer.
- Right - Click (mouse-3) to toggle [[*~live-wc-fraction~][live-wc-fraction]] for the buffer.
- Hover to see details about:
  - Number of lines (non-blank)
  - Number of bytes (roughly equivalent to characters including spaces)
  - Absolute words-count of the buffer.
  - Target word-count (if set)

* Buffer-locals
- Following variables may be set locally for buffers in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][Local variables]] section:

#+begin_example org
# Local Variables:
# live-wc-fraction: t
# live-wc-target: -4000
# End:
#+end_example

** ~live-wc-target~
Default: =nil=

Set word-count target.
Value =0= is considered same as =nil= (unset).
Negative value indicates /cap/.
When cap is set, the fraction is Red near 100%, Cyan near 0%.

** ~live-wc-narrow-to-org-subtree~
Default: =t=

Narrow count to current org subtree whenever possible.
When inside an org-heading, restrict the word-count to that heading.

** ~live-wc-org-headline-levels~
Default: =nil=

Org headings up to this level are considered true /headings/ for word-count restriction.
Beyond this level, org-headings are regarded as list-items.
If value is =nil=, it is derived from ~org-export-headline-levels~.

** ~live-wc-fraction~
Default: =t=

When possible, display word count as fraction percent, otherwise, display absolute (raw) number.

It is possible to display wc as fraction when:
- Region is selected (region / word-count)
- [[*~live-wc-target~][Target]] is set. (word-count / Target)

"Word count" for this calculation respects the setting for [[*~live-wc-narrow-to-org-subtree~][live-wc-narrow-to-org-subtree]].

** ~live-wc-update-unmodified~
Default: =t=

Ordinarily, /live-wc/ counters would continue collecting statistics [[*~live-wc-idle-sec~][periodically]] when Emacs is idle.
However, if this starts causing unwanted CPU load (because the file size/complexity), ~live-wc-update-unmodified~ may be set to =nil=.
/Live-wc/ counters will then collect statistics only once in the beginning when a new buffer is opened and run =nop= (no operation) to conserve CPU and periodically when the buffer gets [[info:elisp#buffer-modified-p][modified]].

#+ATTR_TEXINFO: :tag Warning
#+ATTR_HTML: :tag Warning
#+begin_quote
Setting to =nil= could be undesirable when /live-wc/ is used to navigate the buffer without modifying it, to count words in various org subtrees.
#+end_quote

* Customize
** Customization group
~live-wc~

** ~global-live-wc-modes~
Default: ~'(text-mode)~

List of modes, including all derived modes, for which, ~live-wc-mode~ is turned ON automatically when ~global-live-wc-mode~ is enabled.

** ~live-wc-unbind-modes~
Default: ~'(prog-mode dired-mode special-mode)~

List of modes, including all derived modes, for which, word-count is not attempted even when ~live-wc-mode~ is enabled.

** ~live-wc-idle-sec~
Default: 1 (seconds)

/Live-WC/ counters gather buffer-statistics (number of words, characters and lines) for the current buffer in the background, when Emacs is idle.
This variable sets the frequency.
If the gathered values are not consumed to generate /live-wc/'s mode-line segment, the counter assumes that nothing has happened since the last count, and runs =nop= (no operation).

** ~live-wc-ignore-if~
Default:
#+begin_src emacs-lisp
  '((:ignore (lambda () (= (line-beginning-position) (line-end-position)))
             :desc "blank lines")
    (:ignore (lambda () (nth 4 (syntax-ppss))) :desc "comment (by property)")
    (:ignore (lambda () (looking-at (format " *%s" comment-start-skip)))
             :desc "comment (by marker)")
    (:ignore org-at-comment-p :desc "org comment")
    (:ignore org-at-keyword-p :desc "org keyword")
    (:ignore org-at-table-p :desc "org table")
    (:ignore org-at-TBLFM-p :desc "org table formula")
    (:ignore org-at-table.el-p :desc "table.el")
    (:ignore org-at-heading-p :desc "org heading")
    (:ignore org-at-property-p :desc "org property")
    (:ignore org-at-drawer-p :desc "org drawer")
    (:ignore org-at-property-drawer-p :desc "property drawer's first line")
    (:ignore live-wc-org-block-range :desc "any org block"))
#+end_src

If a line in the buffer matches any of the predicates referenced in this list, that line is skipped (ignored) from counts.
- ~:ignore~ property refers the predicate.
- ~:desc~ is not used, this is meant to remind the user why a predicate was added.

** ~live-wc-max-buffer-size~
Default: 15360 (bytes)

Maximum size of buffer beyond which, word count is inactive.
This is conservatively set to 15kB.

** ~live-wc-line-pos~
Default: ~most-positive-fixnum~

Insert /live-wc/ count at this position on mode line.
Indexing starts with =0=.
This value is auto clipped between =0= and existing number of segments in the mode line.

#+ATTR_TEXINFO: :tag Tip
#+ATTR_HTML: :tag Tip
#+begin_quote
The first two segments in the mode line are often ~%e~ and ~mode-line-front-space~.
So, /live-wc/ added at position =2= will appear at the beginning of an ordinary mode line.
#+end_quote

** ~live-wc-abs-format~
Default: =¶:%d=

Format string for live absolute word count.

** ~live-wc-frac-format~
Default: =¶:%2.2f%%%%=

Format string for live word count when expressed as a fraction (percentage).

#+ATTR_TEXINFO: :tag Warning
#+ATTR_HTML: :tag Warning
#+begin_quote
Remember to sufficiently skip =%= symbols.
#+end_quote

** ~live-wc-bright~
Default: =1.0=

Brightness of /live-wc/ fraction. Interval: =[0.0, 1.0]=

** ~live-wc-overflow-color~
Default: #ff00ff

Color of segment when count overflows [[*~live-wc-target~][live-wc-target]].

** ~live-wc-abs-count-face~
Default: ~mode-line-active~

Face of /live-wc/ when displaying absolute count.

* Interactive commands
** ~live-wc-set-target~
Set word count [[*~live-wc-target~][target]] for the buffer.

** ~live-wc-toggle-format~
Toggle fraction/absolute word count [[*~live-wc-frac-format~][format]] for the buffer.

** ~live-wc-toggle-subtree~
Toggle [[*~live-wc-narrow-to-org-subtree~][subtree counts]] for the buffer.

** ~live-wc-toggle-unmodified~
Toggle state of [[*~live-wc-update-unmodified~][live-wc-update-unmodified]].

** ~live-wc-refresh~
Attempt to refresh word counts.

** =live-wc-keymap=
An unbound keymap within which, key-presses are bound to all above interactive commands.

* License
[[file:LICENSE][GNU LGPLv3]]

# #+INCLUDE: LICENSE src
# Local Variables:
# live-wc-mode: t
# live-wc-fraction: t
# live-wc-target: -1000
# End:
